/******/ (function(modules) { // webpackBootstrap
/******/ 	// install a JSONP callback for chunk loading
/******/ 	function webpackJsonpCallback(data) {
/******/ 		var chunkIds = data[0];
/******/ 		var moreModules = data[1];
/******/ 		var executeModules = data[2];
/******/
/******/ 		// add "moreModules" to the modules object,
/******/ 		// then flag all "chunkIds" as loaded and fire callback
/******/ 		var moduleId, chunkId, i = 0, resolves = [];
/******/ 		for(;i < chunkIds.length; i++) {
/******/ 			chunkId = chunkIds[i];
/******/ 			if(installedChunks[chunkId]) {
/******/ 				resolves.push(installedChunks[chunkId][0]);
/******/ 			}
/******/ 			installedChunks[chunkId] = 0;
/******/ 		}
/******/ 		for(moduleId in moreModules) {
/******/ 			if(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {
/******/ 				modules[moduleId] = moreModules[moduleId];
/******/ 			}
/******/ 		}
/******/ 		if(parentJsonpFunction) parentJsonpFunction(data);
/******/
/******/ 		while(resolves.length) {
/******/ 			resolves.shift()();
/******/ 		}
/******/
/******/ 		// add entry modules from loaded chunk to deferred list
/******/ 		deferredModules.push.apply(deferredModules, executeModules || []);
/******/
/******/ 		// run deferred modules when all chunks ready
/******/ 		return checkDeferredModules();
/******/ 	};
/******/ 	function checkDeferredModules() {
/******/ 		var result;
/******/ 		for(var i = 0; i < deferredModules.length; i++) {
/******/ 			var deferredModule = deferredModules[i];
/******/ 			var fulfilled = true;
/******/ 			for(var j = 1; j < deferredModule.length; j++) {
/******/ 				var depId = deferredModule[j];
/******/ 				if(installedChunks[depId] !== 0) fulfilled = false;
/******/ 			}
/******/ 			if(fulfilled) {
/******/ 				deferredModules.splice(i--, 1);
/******/ 				result = __webpack_require__(__webpack_require__.s = deferredModule[0]);
/******/ 			}
/******/ 		}
/******/ 		return result;
/******/ 	}
/******/
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// object to store loaded and loading chunks
/******/ 	// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 	// Promise = chunk loading, 0 = chunk loaded
/******/ 	var installedChunks = {
/******/ 		"./modules/edit-names": 0
/******/ 	};
/******/
/******/ 	var deferredModules = [];
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/dist/";
/******/
/******/ 	var jsonpArray = window["webpackJsonp"] = window["webpackJsonp"] || [];
/******/ 	var oldJsonpFunction = jsonpArray.push.bind(jsonpArray);
/******/ 	jsonpArray.push = webpackJsonpCallback;
/******/ 	jsonpArray = jsonpArray.slice();
/******/ 	for(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);
/******/ 	var parentJsonpFunction = oldJsonpFunction;
/******/
/******/
/******/ 	// add entry module to deferred list
/******/ 	deferredModules.push(["./client/modules/edit-names.js","cloudcmd.common"]);
/******/ 	// run deferred modules when ready
/******/ 	return checkDeferredModules();
/******/ })
/************************************************************************/
/******/ ({

/***/ "./client/modules/edit-names.js":
/*!**************************************!*\
  !*** ./client/modules/edit-names.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n/* global CloudCmd, DOM */\n\nCloudCmd.EditNames = exports;\n\nconst currify = __webpack_require__(/*! currify/legacy */ \"./node_modules/currify/legacy/index.js\");\nconst exec = __webpack_require__(/*! execon */ \"./node_modules/execon/lib/exec.js\");\nconst supermenu = __webpack_require__(/*! supermenu */ \"./node_modules/supermenu/legacy/supermenu.js\");\nconst smalltalk = __webpack_require__(/*! smalltalk */ \"./node_modules/smalltalk/legacy/smalltalk.js\");\nconst multiRename = __webpack_require__(/*! multi-rename */ \"./node_modules/multi-rename/legacy/multi-rename.js\");\n\nconst reject = Promise.reject.bind(Promise);\n\nconst Info = DOM.CurrentInfo;\nconst {Dialog} = DOM;\n\nconst TITLE = 'Edit Names';\nconst alert = currify(Dialog.alert, TITLE);\nconst refresh = currify(_refresh);\nconst rename = currify(_rename);\n\nlet Menu;\n\nconst EditNames = exec.bind();\nconst ConfigView = {\n    beforeClose: () => {\n        exec.ifExist(Menu, 'hide');\n        DOM.Events.remove('keydown', keyListener);\n        isChanged();\n    },\n};\n\nmodule.exports.init = async () => {\n    await CloudCmd.Edit();\n    \n    const editor = CloudCmd.Edit.getEditor();\n    setListeners(editor);\n};\n\nmodule.exports.show = (options) => {\n    const names = getActiveNames().join('\\n');\n    const config = {\n        ...ConfigView,\n        ...options,\n    };\n    \n    if (Info.name === '..' && names.length === 1)\n        return Dialog.alert.noFiles(TITLE);\n    \n    DOM.Events.addKey(keyListener);\n    \n    CloudCmd.Edit\n        .getEditor()\n        .setValueFirst('edit-names', names)\n        .setMode()\n        .setOption('keyMap', 'default')\n        .disableKey();\n    \n    CloudCmd.Edit.show(config);\n    \n    return CloudCmd.Edit;\n};\n\nfunction keyListener(event) {\n    const ctrl = event.ctrlKey;\n    const meta = event.metaKey;\n    const ctrlMeta = ctrl || meta;\n    const {Key} = CloudCmd;\n    \n    if (ctrlMeta && event.keyCode === Key.S)\n        EditNames.hide();\n    \n    else if (ctrlMeta && event.keyCode === Key.P)\n        smalltalk\n            .prompt(TITLE, 'Apply pattern:', '[n][e]', {cancel: false})\n            .then(applyPattern);\n    \n    event.preventDefault();\n}\n\nfunction applyPattern(pattern) {\n    const newNames = multiRename(pattern, getActiveNames());\n    const editor = CloudCmd.Edit.getEditor();\n    \n    editor.setValue(newNames.join('\\n'));\n}\n\nfunction getActiveNames() {\n    return DOM.getFilenames(DOM.getActiveFiles());\n}\n\nmodule.exports.hide = () => {\n    CloudCmd.Edit.hide();\n};\n\nfunction setListeners() {\n    const element = CloudCmd.Edit.getElement();\n    \n    DOM.Events.addOnce('contextmenu', element, setMenu);\n}\n\nfunction applyNames() {\n    const dir = Info.dirPath;\n    const from = getActiveNames();\n    const nameIndex = from.indexOf(Info.name);\n    \n    const editor = CloudCmd.Edit.getEditor();\n    const to = editor\n        .getValue()\n        .split('\\n');\n    \n    const root = CloudCmd.config('root');\n    \n    Promise.resolve(root)\n        .then(rename(dir, from, to))\n        .then(refresh(to, nameIndex))\n        .catch(alert);\n}\n\nfunction _refresh(to, nameIndex, res) {\n    if (res.status === 404)\n        return res.text().then(reject);\n    \n    const currentName = to[nameIndex];\n    \n    CloudCmd.refresh({\n        currentName,\n    });\n}\n\nfunction getDir(root, dir) {\n    if (root === '/')\n        return dir;\n    \n    return root + dir;\n}\n\nfunction _rename(path, from, to, root) {\n    const dir = getDir(root, path);\n    const {prefix} = CloudCmd;\n    \n    return fetch(`${prefix}/rename`, {\n        method: 'put',\n        credentials: 'include',\n        body: JSON.stringify({\n            from,\n            to,\n            dir,\n        }),\n    });\n}\n\nfunction setMenu(event) {\n    const position = {\n        x: event.clientX,\n        y: event.clientY,\n    };\n    \n    event.preventDefault();\n    \n    if (Menu)\n        return;\n    \n    const editor = CloudCmd.Edit.getEditor();\n    const options = {\n        beforeShow: (params) => {\n            params.x -= 18;\n            params.y -= 27;\n        },\n        \n        afterClick: () => {\n            editor.focus();\n        },\n    };\n    \n    const menuData = {\n        'Save           Ctrl+S' : () => {\n            applyNames();\n            EditNames.hide();\n        },\n        'Go To Line     Ctrl+G' : () => {\n            editor.goToLine();\n        },\n        'Cut            Ctrl+X' : () => {\n            editor.cutToClipboard();\n        },\n        'Copy           Ctrl+C' : () => {\n            editor.copyToClipboard();\n        },\n        'Paste          Ctrl+V' : () => {\n            editor.pasteFromClipboard();\n        },\n        'Delete         Del'    : () => {\n            editor.remove('right');\n        },\n        'Select All     Ctrl+A' : () => {\n            editor.selectAll();\n        },\n        'Close          Esc'    : () => {\n            EditNames.hide();\n        },\n    };\n    \n    const element = CloudCmd.Edit.getElement();\n    \n    Menu = supermenu(element, options, menuData);\n    Menu.show(position.x, position.y);\n}\n\nmodule.exports.isChanged = isChanged;\n\nfunction isChanged() {\n    const editor = CloudCmd.Edit.getEditor();\n    const msg = 'Apply new names?';\n    \n    if (!editor.isChanged())\n        return;\n    \n    Dialog.confirm(TITLE, msg, {cancel: false})\n        .then(applyNames);\n}\n\n\n\n//# sourceURL=file://cloudcmd/client/modules/edit-names.js");

/***/ })

/******/ });